from django.db import models
from django.contrib.auth import get_user_model
import uuid

User = get_user_model()

# Models for transaction system.


class Transaction(models.Model):
    recipient_student = models.ForeignKey(User, on_delete=models.DO_NOTHING, null=True, blank=True)
    receipt_id = models.CharField(max_length=36)
    custom_receipt_id = models.IntegerField(default=0)
    recipient = models.CharField(max_length=50, null=True, blank=True)
    date = models.DateTimeField(auto_now_add=True)
    student_roll = models.BigIntegerField(null=True, blank=True)
    department = models.CharField(max_length=50, null=True, blank=True)
    semester = models.IntegerField(null=True, blank=True)
    email = models.EmailField(default='test@gmail.com', null=True, blank=True)

    signature_of_student = models.CharField(max_length=50)
    signature_of_accountant = models.CharField(max_length=50)
    transaction_type = models.CharField(max_length=50)
    total_amount = models.IntegerField(default=0)

    def __str__(self):
        return f'{self.recipient} transaction data of {self.date}'


class TransactionReason(models.Model):
    reason = models.CharField(max_length=200)

    def __str__(self):
        return self.reason



trans_res_choices = []

for res in TransactionReason.objects.all():
    trans_res_choices.append([res.reason, res.reason])


class TransactionDetails(models.Model):
    transaction = models.ForeignKey(Transaction, on_delete=models.CASCADE)
    transaction_reason = models.CharField(max_length=200, choices=trans_res_choices)
    transaction_amount = models.IntegerField(default=0)


class StatementHistory(models.Model):
    session = models.CharField(max_length=50)
    department = models.CharField(max_length=300)
    semester = models.IntegerField()
    f_type = models.CharField(max_length=50, null=True, blank=True)
    generated_by = models.ForeignKey(User, on_delete=models.DO_NOTHING)
    date = models.DateTimeField(auto_now_add=True)
    title = models.CharField(max_length=100)

    def __str__(self):
        return f'Statement generated by {self.generated_by.name} on {self.date}'


class TransactionStatementHistory(models.Model):
    time_range = models.CharField(max_length=100)
    date = models.DateTimeField(auto_now_add=True)
    generated_by = models.ForeignKey(User, on_delete=models.DO_NOTHING)

    def __str__(self):
        return  f'Transaction statement generated by {self.generated_by.name} at {self.date}'


#   data container model for arrears sheet
class ParentContainerArrears(models.Model):
    session = models.CharField(max_length=100)
    department = models.CharField(max_length=100)
    semester = models.IntegerField()


class DataContainerArrears(models.Model):
    parent = models.ForeignKey(ParentContainerArrears, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    roll = models.IntegerField()
    registration = models.BigIntegerField()
    total = models.IntegerField()
    current = models.IntegerField()


class SubContainerArrears(models.Model):
    data_container = models.ForeignKey(DataContainerArrears, on_delete=models.CASCADE)
    semester = models.IntegerField()
    total_amount = models.CharField(max_length=100)
